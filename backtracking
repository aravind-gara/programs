
#include <stdio.h>

/*#define SIZE 3
int map[SIZE][SIZE] =
{
	{ 3, 0, 9 },
	{ 4, 5, 6 },
	{ 7, 8, 1 }
};
*/
#define SIZE 2
int map[SIZE][SIZE] =
{
	{ 1, 4 },
	{ 2, 3 }
};

int ans = 0x7FFFFFFF;

bool isMatrixOrdered()
{
	int min = -1;
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			if (min > map[i][j]) return false;
			else min = map[i][j];
		}
	}

	return true;
}

int t;
#define SWAP(a, b) { t = a; a = b; b = t; }

void reverse(int index)
{
	for (int i = 0, j = SIZE - 1; i < j; i++, j--) {
		if (index < SIZE) SWAP(map[index][i], map[index][j])
		else SWAP(map[i][index - SIZE], map[j][index - SIZE]);
	}
}

void backtracking(int count)
{
	if (isMatrixOrdered()) {
		if (ans > count) ans = count;
		if (ans == 2)
			printf("ston \n");
		return;
	}

	if (count > 4) return;    //maximaum no of changes

	for (int i = 0; i < (SIZE + SIZE); i++)
	{
		reverse(i);
		backtracking(count + 1);
		reverse(i);
	}
}

int main()
{
	backtracking(0);
	printf("answer: %d\n", ans);
}
